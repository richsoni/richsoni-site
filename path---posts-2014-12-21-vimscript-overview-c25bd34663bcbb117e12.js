webpackJsonp([0x5c48ebcc08c4],{767:function(e,t){e.exports={data:{markdownRemark:{html:'<p><a class=\'caption\' target="_blank" href=\'https://www.flickr.com/photos/elijahporter/8218473966/in/photolist-dwePo7-hXWnuU-eb1Zwu-hXWewi-hXWxbf-nEnvu4-dwePZ1-ozFjeY-dweP9Y-ozTwTH-hXWdnp-hXX5wa-hXWvvw-ozTyHz-hXWsfy-hXWgEs-ozRCyS-6zzL8F-hXWaSz-dsCcus-dsCbVm-dw9eZn-dweNPC-hXW3uZ-ozBAyg-dw9fpX-hXWZvP-dweR9u-jE9wH1-dw9ewp-fEFWJb-dtC7ou-hCRZi1-oBbFPF-dw9iWZ-dKazBG-hCSjAh-dkkC7x-oBbvr7-nFAsin-fjwf33-hCS1am-hCSbqj-hCSZRa-hCRJwB-ag4ZFM-MGzDJ-53o4h2-p5tpND-p5tpta/\'>Header Photo credit to Elijah Porter </a></p>\n<h1>View The Talk</h1>\n<p>I presented this material at the New York Vim Meetup.\nView the presentation below:</p>\n<iframe width="560" height="315" src="http://www.youtube.com/embed/WfyXKnQ9kAQ" frameborder="0" allowfullscreen></iframe>\n<h1>Here I Dreamt I Was An Architect</h1>\n<blockquote>\n<p>"Design is not making beauty, beauty emerges from selection, affinities, integration, love." ~ Louis Kahn</p>\n</blockquote>\n<aside class=\'col-xs-6\'>\n  <img class=\'img-responsive\' src=\'/images/posts/four_freedoms_map.png\' >\n  <div class=\'caption\'>\n  The Four Freedoms Park, sandwiched between Manhattan and Long Island\n  </div>\n</aside>\n<p>The <a href="http://www.fdrfourfreedomspark.org/">Four Freedoms Park</a> (image above) is an architectural masterpiece designed by <a href="http://www.biography.com/people/louis-kahn-37884">Louis Khan</a>.\nThe park\'s architecture embellishes its riverfront property which lies between Manhattan and Long Island.\nInstead of competing with the environment, <a href="http://www.biography.com/people/louis-kahn-37884">Khan</a> often designs architecture which leverages it.</p>\n<p>This same principles define well crafted Vimscript.\nCelebrated Vimscript authors (e.g. <a href="https://github.com/tpope">tpope</a>, <a href="https://github.com/tommcdo">tommcdo</a>, and <a href="https://github.com/AndrewRadev">AndrewRadev</a>) compliment vim\'s features with their plugins.\nDesign at this level requires a comprehensive understanding of vim, and its swath of functionality.\n<em>Great Vimscript feels natural to vim users</em>.\nThis is just as important as writing something useful.</p>\n<p>If limited to one piece of advice to Vimscript authors, I would offer this:\n<em>Compliment your environment, do not compete with it.</em>\nThis article builds off of this concept, and extends advice on how to author great Vimscript.</p>\n<h1>Building A Foundation</h1>\n<p>Conceptualizing certain ideas is a prerequisite to authoring exceptional Vimscript.\nThese next sections offer a variety of such ideas.\nThe aim is to <em>prime the mind into recognizing good problems to solve with Vimscript</em>, and to compress the learning curve of the language.</p>\n<h2>Customization Over Origination</h2>\n<p>Most Vimscripts serve one of the two following functions:</p>\n<ol>\n<li>Customize/extend built-in settings</li>\n<li>Enhance the editor with brand new functionality</li>\n</ol>\n<p>In either situation, a single principal prevails:\n<em>Straying from Vim\'s convictions often creates more work, and a less polished solution.</em>\nIt\'s not hard to find code that breaks this rule, and it hurts the community when code like gets released.\nIt bloats the codebase, and teaches bad habits.</p>\n<h3>Customization Example: File Browsing</h3>\n<p><a href="https://github.com/scrooloose/nerdtree">NerdTree</a> is a popular plugin that enables file browsing a\' la TextMate\'s project drawer.\nThe plugin duplicates a large amount of existing code (netrw), and has a significant functionality flaw.\nDrew Neil eloquently phrases how project drawers and Vim splits mix like <a href="http://vimcasts.org/blog/2013/01/oil-and-vinegar-split-windows-and-project-drawer/">Oil and vinegar</a>.</p>\n<p>Another option, <a href="https://github.com/tpope/vim-vinegar">vim-vinegar</a> plays nicely with splits and leverages existing netrw code.\nInstead of reinventing functionality, vinegar improves netrw with slick configurations.</p>\n<p>What is the gain?<br>\nQualitatively, <a href="https://github.com/tpope/vim-vinegar">vim-vinegar</a> feels more natural to a user adapted to vim\'s native functionality.<br>\nQuantitatively, <a href="https://github.com/tpope/vim-vinegar">vim-vinegar</a> is <em>5x smaller</em> than <a href="https://github.com/scrooloose/nerdtree">NerdTree</a> (529 kb vs 2775 kb).</p>\n<h4>Resources</h4>\n<ol>\n<li><code>:h netrw</code></li>\n<li><a href="https://github.com/tpope/vim-vinegar">vim-vinegar</a></li>\n<li><a href="http://vimcasts.org/blog/2013/01/oil-and-vinegar-split-windows-and-project-drawer/">Oil and vinegar</a></li>\n<li><a href="https://github.com/scrooloose/nerdtree">NerdTree</a></li>\n</ol>\n<h3>Augmentation Example: Swapping Text</h3>\n<p>Yet, there are circumstances which vim provides no feasable solution.\nA great example is swapping text.\nExamine the example swapping "bar" and "baz" using nothing but stock vim commands.\nIt amounts to 15 keystrokes, and to revert the operation requires 2 undo commands.</p>\n<pre><code>"foo [b]ar baz"\n(viwy w viwp bb viwp)\n"foo [baz] bar"\n</code></pre>\n<p>The plugin <a href="https://github.com/tommcdo/vim-exchange">vim-exchange</a>, wraps this functionality into one swift command.\nExamine the same operation with <a href="https://github.com/tommcdo/vim-exchange">vim-exchange</a> (9 keystrokes, and 1 undo).</p>\n<pre><code>"foo [b]ar baz"\n(cxiw w cxiw)\n"foo [baz] bar"\n</code></pre>\n<p>A key to the design of this plugin is interface to the end user.\nThe mapping <code>cx</code> does not clobber any vim functionality.\nThe command is an operator so things like <code>cxaw</code> and <code>cxx</code> work.\nThese details make the plugin flow with vim.</p>\n<h4>References</h4>\n<ol>\n<li><a href="https://github.com/tommcdo/vim-exchange">vim-exchange</a></li>\n<li><code>:h operator</code></li>\n</ol>\n<h2>Cause And Effect</h2>\n<p>Vim is <a href="http://vimdoc.sourceforge.net/htmldoc/autocmd.html#autocmd-events-abc">event</a> focused.\nIt\'s waiting for things to happen (sequences of keypresses).\nWhen one such trigger occurs, actions fire.\nCallbacks respond to these <a href="http://vimdoc.sourceforge.net/htmldoc/autocmd.html#autocmd-events-abc">events</a>.</p>\n<p><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/23.html" title="Learn Vimscript The Hard Way - Functions">Functions</a> bind to key sequences (<a href="http://learnvimscriptthehardway.stevelosh.com/chapters/03.html" title="Learn Vimscript The Hard Way - Basic Mapping">mappings</a>, commands, <a href="http://learnvimscriptthehardway.stevelosh.com/chapters/08.html" title="Learn Vimscript The Hard Way - Abbreviations">abbreviations</a>) and <a href="http://vimdoc.sourceforge.net/htmldoc/autocmd.html#autocmd-events-abc">events</a> (<a href="http://learnvimscriptthehardway.stevelosh.com/chapters/12.html" title="Learn Vimscript The Hard Way - Autocommands">autocommands</a>).\nHere are some examples:</p>\n<pre><code>nmap ge ibeep&#x3C;cr>\niabbrev beep boop\ncommand Beep :normal!("iboop")\n\nautocmd FileType markdown echo(\'beepboop\')\n</code></pre>\n<p>Choosing the right <a href="http://vimdoc.sourceforge.net/htmldoc/autocmd.html#autocmd-events-abc">event</a> a piece of Vimscript should bind to can make the design more clean / useful.</p>\n<h4>Resources</h4>\n<ol>\n<li><code>:h map.txt</code></li>\n<li><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/03.html" title="Learn Vimscript The Hard Way - Basic Mapping">Learn Vimscript The Hard Way - Basic Mapping</a></li>\n<li><code>:h abbrev</code></li>\n<li><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/08.html" title="Learn Vimscript The Hard Way - Abbreviations">Learn Vimscript The Hard Way - Abbreviations</a></li>\n<li><code>:h command</code></li>\n<li><code>:h normal</code></li>\n<li><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/29.html" title="Learn Vimscript The Hard Way - Normal">Learn Vimscript The Hard Way - Normal</a></li>\n<li><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/30.html" title="Learn Vimscript The Hard Way - Execute Normal!">Learn Vimscript The Hard Way - Execute Normal!</a></li>\n<li><code>:h autocmd</code></li>\n<li><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/12.html" title="Learn Vimscript The Hard Way - Autocommands">Learn Vimscript The Hard Way - Autocommands</a></li>\n<li><code>:h echo</code></li>\n<li><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/01.html" title="Learn Vimscript The Hard Way - Echoing Messages">Learn Vimscript The Hard Way - Echoing Messages</a></li>\n</ol>\n<h1>On Learning Syntax</h1>\n<p>This article refrains from explicitly covering Vimscript syntax.\nAttepts at writing a tutorial would be subpar to these more comprehsive tutorials:</p>\n<ol>\n<li>The harder / quicker path: <code>:h usr_41.txt</code></li>\n<li>The easier / slower path:  <a href="http://learnvimscriptthehardway.stevelosh.com/">Learn Vimscript the Hard Way</a></li>\n</ol>\n<p>Each resource provides detailed information on syntax and technical details required when writing Vimscript.\nThey each take a unique approach to essentially the same material.\n<em>After reading either piece, you should be comfortable with basic Vimscript.</em>\nAlbeit, less palpable aspects may still be insipid.\nThe aim of this article is to fill some of those missing pieces.</p>\n<p>The remaining sections offer tidbits of wisdom I aquired through experience.\nOne section covers Vimscript itself, while the other targets writing plugins.</p>\n<h4>Resources</h4>\n<ol>\n<li><code>:h usr_41.txt</code></li>\n<li><a href="http://learnvimscriptthehardway.stevelosh.com/">Learn Vimscript the Hard Way</a></li>\n</ol>\n<h1>Hacking Vim Script</h1>\n<p>Once you know Vimscript, opportunities for productivity boosts emerge.\nThis section presents some ideas that will assist your efforts to learn Vimscript.</p>\n<h2>Don\'t Prematurely Write Plugins</h2>\n<p>Write Vimscript for yourself before broadcasting it to the world.\n<em>When starting out it\'s important to write a lot of actual code.</em>\nPlugins require documentation, and degrees of design that bring their own challenges.\nThis will take away from the learning process of the language.</p>\n<h2>Poking The Box</h2>\n<p>Obviously, Vimscript is best written within vim.\nDoing this offers conveniences that are impossible to recreate in another editor.\nNamely, a gateway to an instant feedback loop via runtime evaluation.\n<em>Instead of guessing how a piece of code will behave, vim supports trying it immediately.</em>\nBelow are a handful of methods for evaluating Vimscript at runtime.</p>\n<h3>Evaluating Files</h3>\n<p>The primary runtime evaluation tool is the <code>:source</code> command.\nThis command accepts a path to a file as an argument, and loads it into vim\'s runtime.\nThis avoids having to close and open vim again.</p>\n<pre><code class="language-vim">:source ~/.vim/init/keybindings.vim\n</code></pre>\n<h4>Pro Tips</h4>\n<ol>\n<li>Add <code>!</code> to the end of <a href="http://learnvimscriptthehardway.stevelosh.com/chapters/23.html" title="Learn Vimscript The Hard Way - Functions">functions</a>, allowing them to reload.</li>\n<li><code>:so</code> is the same as <code>:source</code></li>\n<li><code>:source %</code> will load the current file</li>\n</ol>\n<p>Here are some reloadable code examples:</p>\n<pre><code class="language-vim">nmap ge :echo(\'beep\')&#x3C;CR>\niabbrev beep boop\ncommand! Beep normal! iboop\nfunction! BeepBoop()\n  echo(\'beep\')\nendfunction\n</code></pre>\n<h4>Resources</h4>\n<ol>\n<li><code>:h so</code></li>\n<li><code>:h function</code></li>\n<li><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/23.html" title="Learn Vimscript The Hard Way - Functions">Learn Vimscript The Hard Way - Functions</a></li>\n</ol>\n<h3>Inspecting</h3>\n<p><em>Command mode is not a REPL</em> for Vimscript.\nAs such, other means of interaction need to exist.\nThe simplest strategy is <a href="http://learnvimscriptthehardway.stevelosh.com/chapters/01.html" title="Learn Vimscript The Hard Way - Echoing Messages">echo</a>.</p>\n<pre><code class="language-vim">:let g:beep=\'boop\'\n:g:beep\n:echo(g:beep)\n:1 + 1\n:echo(1+1)\n</code></pre>\n<p>It\'s useful to <a href="http://learnvimscriptthehardway.stevelosh.com/chapters/01.html" title="Learn Vimscript The Hard Way - Echoing Messages">echo</a> out <a href="http://learnvimscriptthehardway.stevelosh.com/chapters/19.html" title="Learn Vimscript The Hard Way - Variables">variables</a>, but can get cumbersome with longer experssions.\n<a href="https://github.com/tpope">Tpope</a>\'s <a href="https://github.com/tpope/vim-scriptease">scriptease</a> plugin offers some facilities to allieviate this.</p>\n<p>The <code>g!</code> is an operator that replaces the text with evaluated Vimscript.\nFor example, running <code>g!!</code> on the line <code>1 + 1</code> would change the line to <code>2</code>.</p>\n<p><code>:PP</code> opens a REPL for evaluating Vimscript.</p>\n<pre><code class="language-vim">:PP\nPP> system(\'ls\')\n"CNAME\\n_config.yml\\n_includes\\n_layouts\\n_posts\\n_publish\\n_site\\nassets\\nbin\\ncontact.html\\ncss\\nfeed\\nfonts\\nimages\\nimg\\nindex.html\\njs\\nnode_modules\\npac\nkage.json\\nresume.html\\nsass\\nsrc\\ntest\\ntodo.txt\\n"\n</code></pre>\n<h4>Resources</h4>\n<ol>\n<li><code>:h command</code></li>\n<li><code>:h g:</code></li>\n<li><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/19.html" title="Learn Vimscript The Hard Way - Variables">Learn Vimscript The Hard Way - Variables</a></li>\n<li><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/20.html" title="Learn Vimscript The Hard Way - Variable Scoping">Learn Vimscript The Hard Way - Variable Scoping</a></li>\n<li><code>:h echo</code></li>\n<li><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/01.html" title="Learn Vimscript The Hard Way - Echoing Messages">Learn Vimscript The Hard Way - Echoing Messages</a></li>\n<li><a href="https://github.com/tpope/vim-scriptease">scriptease</a></li>\n<li><code>:h scriptease</code></li>\n</ol>\n<h2>Use The OS</h2>\n<p>The operating system provides a lot of functionality, and its smart to leverage it.\nCalling <code>system</code> exposes unix commands to vim.</p>\n<pre><code>echo(system(\'ls\'))\necho(system(\'ls -lal \'.expand(\'%\')))\n</code></pre>\n<h4>Resources</h4>\n<ol>\n<li><code>:h system</code></li>\n<li><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/52.html" title="Learn Vimscript The Hard Way - External Commands">Learn Vimscript The Hard Way - External Commands</a></li>\n<li><code>:h expand</code></li>\n</ol>\n<h2>State Up To Date</h2>\n<p>The key to Vimscript is understanding how to manipulate vim\'s state.\nThere are 3 main ways to interact with application state in vim:</p>\n<ol>\n<li>Passively reading current state</li>\n<li>Updating state</li>\n<li>Binding to an <a href="http://vimdoc.sourceforge.net/htmldoc/autocmd.html#autocmd-events-abc">event</a> broadcasted when state changes</li>\n</ol>\n<p>Most Vimscript functionality employs one of these interactions.</p>\n<h3>Reading State</h3>\n<p>Variables govern the state and behavior of vim.\nVariable namespacing is systematic in Vimscript.\nHere are the different types of variables:</p>\n<p><strong>g:variables</strong> - global variables<br>\nGlobals preserve value in any situation within vim.\nThis means any mode, and any buffer.\nA frequent use of these variables is to memoize plugin loading.</p>\n<pre><code>:echo(g:loaded_fugitive)\n> 1\n</code></pre>\n<p><strong>s:variables</strong> - script local<br>\nThese variables have scope limited to their file.\nThis allows 2 scripts to have the same variable, but not collide.</p>\n<pre><code class="language-vim">let s:counter = 0\nfunction! MyCounter()\n  let s:counter = s:counter + 1\n  echo(s:counter)\nendfunction\n</code></pre>\n<p><strong>b:variables</strong> - buffer local<br>\nThese variables bind to the current buffer.\nSyntax specific functionality is a great usecase for them.</p>\n<pre><code class="language-vim">:echo(b:did_ftplugin)\n> 1\n</code></pre>\n<p><strong>$VARIABLES</strong> - Environment<br>\nAll environment variables carry over from the shell.\nLike the shell, dollar signs ($) prefix environment variables.</p>\n<pre><code>:echo($PAGER)\n> less\n</code></pre>\n<p><strong>&#x26;variables</strong> - Set options<br>\nCalling <code>set filetype=markdown</code> is a wrapper to vim\'s option variables.</p>\n<pre><code>:echo(&#x26;tabstop)\n> 2\n</code></pre>\n<p><strong>@variable</strong> - register variables<br>\nThe registers are global containers to save values.\nMacros save into single digit global registers(0-9a-z).\nAccess to these registers via <code>@</code> in Vimscript.</p>\n<pre><code>:let @d=\'ggdG\'\n:echo(@d)\n> ggdG\n</code></pre>\n<h4>Buffer State</h4>\n<p>Some buffer state is not available via variables.\nThis makes vim faster because it does not need to constantly write changing data.\n<em>It will lazy-load this information via certain functions it provides.</em>\nConsider this example of reading the current line:</p>\n<pre><code class="language-vim">:echo(line(\'.\'))\n> 262\n</code></pre>\n<h4>Resources</h4>\n<ol>\n<li><code>:h variables</code></li>\n<li><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/19.html" title="Learn Vimscript The Hard Way - Variables">Learn Vimscript The Hard Way - Variables</a></li>\n<li><code>:h line</code></li>\n</ol>\n<h3>Updating State</h3>\n<p>Whenever you interact with vim you are updating runtime state.\nA call to <code>:set filetype=markdown</code> will update the <code>&#x26;filetype</code> variable.\nTyping <code>gg</code> will move the current line.\n<code>:w</code> tells vim to execute its buffer writing sequence.</p>\n<p>State updates are similar in Vim and Vimscript.\nThe main ways to update state are as follows:</p>\n<p>(Note <code>.</code> concats <a href="http://learnvimscriptthehardway.stevelosh.com/chapters/26.html" title="Learn Vimscript The Hard Way - Strings">strings</a> in Vimscript)</p>\n<p><strong>let</strong> - updates a variables state</p>\n<pre><code>   let &#x26;filetype=\'markdown\'\n   let g:script_loaded=1\n</code></pre>\n<p><strong>execute</strong> - evaluates a string as an ex (:) command</p>\n<pre><code>   execute ":w ".expand(\'%\')\n</code></pre>\n<p><strong>normal!</strong> - executes commands as if a user typed them</p>\n<pre><code>   normal! gg=G\n   execute "normal! ".commands\n</code></pre>\n<p><strong>eval</strong> - evaluates a string as Vimscript</p>\n<pre><code>   eval(\'let @r="gg=G")\n</code></pre>\n<h4>Resources</h4>\n<ol>\n<li><code>:h :set</code></li>\n<li><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/02.html" title="Learn Vimscript The Hard Way - Setting Options">Learn Vimscript The Hard Way - Setting Options</a></li>\n<li><code>:h :let</code></li>\n<li><code>:h :execute</code></li>\n<li><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/28.html" title="Learn Vimscript The Hard Way - Execute">Learn Vimscript The Hard Way - Execute</a></li>\n<li><code>:h :normal</code></li>\n<li><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/29.html" title="Learn Vimscript The Hard Way - Normal">Learn Vimscript The Hard Way - Normal</a></li>\n<li><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/30.html" title="Learn Vimscript The Hard Way - Execute Normal!">Learn Vimscript The Hard Way - Execute Normal!</a></li>\n<li><code>:h :eval</code></li>\n<li><code>:h :expand</code></li>\n</ol>\n<h3>Listening For State Changes</h3>\n<p>Vim is constantly changing state.\nYour code can listen to these events by subscribing to them.</p>\n<h4>Keyboard Events</h4>\n<p>Vim has 2 main modes for subscribing to keyboard events: <a href="http://learnvimscriptthehardway.stevelosh.com/chapters/03.html" title="Learn Vimscript The Hard Way - Basic Mapping">mappings</a>, and <a href="http://learnvimscriptthehardway.stevelosh.com/chapters/08.html" title="Learn Vimscript The Hard Way - Abbreviations">abbreviations</a>.\n<a href="http://learnvimscriptthehardway.stevelosh.com/chapters/03.html" title="Learn Vimscript The Hard Way - Basic Mapping">Mappings</a> can be global, or mode-specific:</p>\n<pre><code>:map  &#x3C;f12> :h&#x3C;cr>\n:imap &#x3C;c-c> &#x3C;esc>:w&#x3C;cr>\n:nmap ZJ JZZ\n</code></pre>\n<p><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/08.html" title="Learn Vimscript The Hard Way - Abbreviations">Abbreviations</a> work in insert, command, and replace mode.\nThe tell vim to replace one set of text with another.</p>\n<pre><code>cabbrev W w\nabbrev teh the\niabbrev yo you\n</code></pre>\n<h4>Autocommands</h4>\n<p><a href="http://vimdoc.sourceforge.net/htmldoc/autocmd.html#autocmd-events-abc">Events</a> fire in vim when stuff happens.\nVimscript functions can bind to these <a href="http://vimdoc.sourceforge.net/htmldoc/autocmd.html#autocmd-events-abc">events</a>.\n<a href="http://learnvimscriptthehardway.stevelosh.com/chapters/12.html" title="Learn Vimscript The Hard Way - Autocommands">Autocommands</a> expose this functionality (see the <a href="#CauseAndEffect">Cause and Effect</a> section above).</p>\n<h4>Resources</h4>\n<ol>\n<li><code>:h map</code></li>\n<li><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/03.html" title="Learn Vimscript The Hard Way - Basic Mapping">Learn Vimscript The Hard Way - Basic Mapping</a></li>\n<li><code>:h abbrev</code></li>\n<li><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/08.html" title="Learn Vimscript The Hard Way - Abbreviations">Learn Vimscript The Hard Way - Abbreviations</a></li>\n<li><code>:h autocmd</code></li>\n<li><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/12.html" title="Learn Vimscript The Hard Way - Autocommands">Learn Vimscript The Hard Way - Autocommands</a></li>\n</ol>\n<h1>Plugin Design / Best Practices</h1>\n<p>After achieving comfort with Vimscript, the next logical step is to write useful scripts and share them with the world.\nThe easiest way to share is via <a href="http://learnvimscriptthehardway.stevelosh.com/chapters/42.html" title="Learn Vimscript The Hard Way - Plugin Layout in the Dark Ages">plugins</a>.</p>\n<h2>Structuring</h2>\n<p>In general, there are 2 main types of <a href="http://learnvimscriptthehardway.stevelosh.com/chapters/42.html" title="Learn Vimscript The Hard Way - Plugin Layout in the Dark Ages">plugins</a>: global (<a href="https://github.com/tpope/vim-fugitive">fugitive</a>, <a href="https://github.com/AndrewRadev/splitjoin.vim">splitjoin</a>, <a href="https://github.com/tommcdo/vim-exchange">vim-exchange</a>), and filetype specific (<a href="https://github.com/tpope/vim-rails">vim-rails</a>).\nThe structure can vary, but here is a simplified template for each:</p>\n<h3>Global Plugin</h3>\n<ol>\n<li>doc</li>\n<li><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/53.html" title="Learn Vimscript The Hard Way - Autoloading">autoload</a></li>\n<li>plugin</li>\n</ol>\n<p>For a global plugin, the general formula is simple: expose your plugin within the plugin directory, and autoload everything else.\nWhen starting out, <a href="http://learnvimscriptthehardway.stevelosh.com/chapters/53.html" title="Learn Vimscript The Hard Way - Autoloading">autoload</a> may be overkill, but read <code>:h autoload</code> to prime your brain to use it in the future.</p>\n<h3>FT Plugin</h3>\n<ol>\n<li>doc</li>\n<li><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/44.html" title="Learn Vimscript The Hard Way - Detecting Filetypes">ftdetect</a></li>\n<li>ftplugin</li>\n<li><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/45.html" title="Learn Vimscript The Hard Way - Basic Syntax Highlighting">syntax</a></li>\n</ol>\n<p>Filetype plugins generally have a bit more meat to them.\n<a href="http://learnvimscriptthehardway.stevelosh.com/chapters/44.html" title="Learn Vimscript The Hard Way - Detecting Filetypes">Ftdetect</a> evaluates the filetype.\n<a href="http://learnvimscriptthehardway.stevelosh.com/chapters/45.html" title="Learn Vimscript The Hard Way - Basic Syntax Highlighting">Syntax</a> outlines rules for vims syntax highlighter.\nFtplugin is where buffer specific code resides.</p>\n<h2>Loading</h2>\n<p><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/42.html" title="Learn Vimscript The Hard Way - Plugin Layout in the Dark Ages">Plugins</a> should memoize themselves (unless under development).\nTo make sure they don\'t load twice, guard files with a snippet like this:</p>\n<pre><code class="language-vim">if exists("g:loaded_gitgutter")\n  finish\nendif\nlet g:loaded_gitgutter = 1\n</code></pre>\n<h2>The Deal With SID and Plug</h2>\n<h3>SID</h3>\n<p>Plugins can leverage the <code>&#x3C;SID></code> feature offered by Vim.\nImagine this circumstance:</p>\n<pre><code class="language-vim">""""""""""""""""""\n"pluginA.vim\n""""""""""""""""""\nfunction! BeepBoop()\n  echo(\'beep\')\nendfunction\nnmap ge :call BeepBoop()&#x3C;cr>\n\n""""""""""""""""""\n"pluginB.vim\n""""""""""""""""""\nfunction! BeepBoop()\n  echo(\'boop\')\nendfunction\n</code></pre>\n<p>In this situation the mapping from pluginA, could actually call BeepBoop from pluginB depinding on the order in which scripts load.\nTo prevent this, the <code>&#x3C;SID></code> prefix expands to the <code>&#x3C;SNR></code> of the file.</p>\n<pre><code class="language-vim">""""""""""""""""""\n"pluginA.vim\n""""""""""""""""""\nfunction! s:BeepBoop()\n  echo(\'beep\')\nendfunction\nnmap ge :call &#x3C;SID>BeepBoop()&#x3C;cr>\n\n""""""""""""""""""\n"pluginB.vim\n""""""""""""""""""\nfunction! s:BeepBoop()\n  echo(\'boop\')\nendfunction\n</code></pre>\n<p>Vim would expand that snippet to be this:</p>\n<pre><code class="language-vim">"pluginA.vim\nfunction! &#x3C;SNR>48_BeepBoop()\n  echo(\'beep\')\nendfunction\nnmap ge :call &#x3C;SNR>48_BeepBoop()&#x3C;cr>\n\n"pluginB.vim\nfunction! &#x3C;SNR>_87BeepBoop()\n  echo(\'boop\')\nendfunction\n</code></pre>\n<p><em><code>&#x3C;SID></code> and <code>function s:name</code> make function names more explicit, and reliable.</em></p>\n<h3>Plug</h3>\n<p>The vim documentation says <code>&#x3C;Plug></code> is a "special code that a typed key will never produce".\nUnlike <code>&#x3C;SID>, &#x3C;PLUG></code> is available to the global namespace.\nIt can expose a function call to the global environment.\nAlas, <em>a user can access that function elsewhere.</em>\nThis allows them to attach their own keybinding to that function.\nThis globally living <code>&#x3C;Plug></code> code is the same for all plugins.\nAs such, use conventionally named commands like <code>&#x3C;Plug>PluginnameFunc</code> to avoid collisions.</p>\n<pre><code class="language-vim">"""""""""""\n"plugin.vim\n"""""""""""\nnoremap &#x3C;unique> &#x3C;Plug>PluginFunc :call &#x3C;SID>VimScriptFn()&#x3C;CR>\n\n""""""""""""""""\n"keybindings.vim\n""""""""""""""""\n:nmap _p &#x3C;Plug>ScriptFunc\n</code></pre>\n<h4>Resources</h4>\n<ol>\n<li><code>:h plugins</code></li>\n<li><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/42.html" title="Learn Vimscript The Hard Way - Plugin Layout in the Dark Ages">Learn Vimscript The Hard Way - Plugin Layout in the Dark Ages</a></li>\n<li><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/44.html" title="Learn Vimscript The Hard Way - Detecting Filetypes">Learn Vimscript The Hard Way - Detecting Filetypes</a></li>\n<li><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/45.html" title="Learn Vimscript The Hard Way - Basic Syntax Highlighting">Learn Vimscript The Hard Way - Basic Syntax Highlighting</a></li>\n</ol>\n<h1>Conclusion</h1>\n<p>Vimscript is a useful language that one can learn in a short time.\nThe aim of this article is to highlight the best ways to use it.\nWhen used in conjunction with <code>:h usr_41.txt</code> or <a href="http://learnvimscriptthehardway.stevelosh.com/">Learn Vimscript the Hard Way</a> it should guide the reader to write exceptionally crafted Vimscript.\nTo reiterate the mantra from the beginning of this post: <em>Compliment your environment, do not compete with it.</em>\nAnd, most of all have fun!!!</p>\n<p>Please feel free to post questions in the comments section below.</p>\n<h1>Resources</h1>\n<ol>\n<li><a href="http://learnvimscriptthehardway.stevelosh.com/">Learn Vimscript the Hard Way</a></li>\n<li><a href="https://github.com/scrooloose/nerdtree">NerdTree</a></li>\n<li><a href="http://vimcasts.org/blog/2013/01/oil-and-vinegar-split-windows-and-project-drawer/">Oil and vinegar</a></li>\n<li><a href="https://github.com/tpope/vim-scriptease">scriptease</a></li>\n<li><a href="https://github.com/tpope/vim-vinegar">vim-vinegar</a></li>\n<li><code>:h :eval</code></li>\n<li><code>:h :execute</code></li>\n<li><code>:h :expand</code></li>\n<li><code>:h :let</code></li>\n<li><code>:h :normal</code></li>\n<li><code>:h :set</code></li>\n<li><code>:h abbrev</code></li>\n<li><code>:h autocmd</code></li>\n<li><code>:h command</code></li>\n<li><code>:h echo</code></li>\n<li><code>:h expand</code></li>\n<li><code>:h function</code></li>\n<li><code>:h g:</code></li>\n<li><code>:h line</code></li>\n<li><code>:h map.txt</code></li>\n<li><code>:h map</code></li>\n<li><code>:h netrw</code></li>\n<li><code>:h normal</code></li>\n<li><code>:h scriptease</code></li>\n<li><code>:h so</code></li>\n<li><code>:h system</code></li>\n<li><code>:h usr_41.txt</code></li>\n<li><code>:h variables</code></li>\n</ol>',frontmatter:{title:"On Vimscript"},fields:{date:"2014-12-21"}}},pathContext:{url:"/posts/2014-12-21-vimscript-overview/"}}}});
//# sourceMappingURL=path---posts-2014-12-21-vimscript-overview-c25bd34663bcbb117e12.js.map