{"data":{"markdownRemark":{"html":"<p>I recently upgraded <a href=\"https://richsoni.com\">richsoni.com</a> to <a href=\"https://www.gatsbyjs.org/blog/2018-09-17-gatsby-v2/\">Gatsby Version 2.0</a>, A previous post, '<a href=\"https://www.richsoni.com/posts/2018-11-29-gatsby-2-upgrade/\">Upgrading richsoni.com To Gatsby 2</a>', chronicles that experience.</p>\n<p>The main driver behind this upgrade was alleviate issues I was having with adding <a href=\"https://www.typescriptlang.org/\">Typescript</a> to the project.\nAs I mentioned in '<a href=\"https://www.richsoni.com/posts/2018-11-29-gatsby-2-upgrade/\">Upgrading richsoni.com To Gatsby 2</a>', I had the following assumption:</p>\n<blockquote>\n<p>'However, my interest was piqued this week, after a few murky attempts at installing <a href=\"https://www.npmjs.com/package/gatsby-plugin-typescript/\">gatsby-plugin-typescript</a>.\nIt turns out that <a href=\"https://www.typescriptlang.org/\">Typescript</a> is bundled by default in Gatsby V2, making <a href=\"https://www.npmjs.com/package/gatsby-plugin-typescript/\">gatsby-plugin-typescript</a> unnecessary.\nThis was enough reason for me to perform the update.\nHowever, to my disappointment, this was not the case.' ~ From '<a href=\"https://www.richsoni.com/posts/2018-11-29-gatsby-2-upgrade/\">Upgrading richsoni.com To Gatsby 2</a>'</p>\n</blockquote>\n<p>This assumption was false, despite the <a href=\"https://www.gatsbyjs.org/blog/2018-09-17-gatsby-v2/\">Gatsby Version 2.0</a> Release notes, mentioning <a href=\"https://www.typescriptlang.org/\">Typescript</a> support:</p>\n<blockquote>\n<p>Babel 7\nBabel helps ensure the JavaScript you write works across different browsers (including older versions of Internet Explorer).</p>\n<p>The upgrade brings:</p>\n<p>Improved build speed\nExperimental support for automatic polyfilling See also our docs for this feature\n<strong>Support for more syntax e.g. TypeScript and JSX Fragments</strong>\n~ <a href=\"https://www.gatsbyjs.org/blog/2018-09-17-gatsby-v2/\">Gatsby Version 2.0</a> Release Notes</p>\n</blockquote>\n<p>I ended up repeating many of the steps I attempted before <a href=\"https://www.richsoni.com/posts/2018-11-29-gatsby-2-upgrade/\">Upgrading richsoni.com To Gatsby 2</a>, and ran into many of the same errorsüò¢</p>\n<p>But, at last I finally got everything working the way I expected, and my site is ready for its <a href=\"https://www.typescriptlang.org/\">Typescript</a> conversion.</p>\n<p>Since this was such an <a href=\"https://en.wikipedia.org/wiki/Odyssey\">Odyssey</a>, I decided to outline the changes required in my repository.\nHopefully, any other brave souls jettisoned on this journey will heed this advice, and save themselves the pain and sorrow.</p>\n<p><strong>At the end of this post, I give my recommended steps, hopefully it will save you from the obstacles I faced.</strong></p>\n<h1>üò± Step 1: Hey Gatsby, I'm A Typescript File Now!</h1>\n<p>Since I thought <a href=\"https://www.gatsbyjs.org/blog/2018-09-17-gatsby-v2/\">Gatsby Version 2.0</a> natively supported <a href=\"https://www.typescriptlang.org/\">Typescript</a>, my first thought was to a file, and confirm that <a href=\"https://www.typescriptlang.org/\">Typescript</a> was working properly.</p>\n<h2>‚öñ Obstacle 1: There are right and wrong files to choose</h2>\n<p>The first file I tried to convert was <code>src/pages/index.js</code>.\nI abandoned this strategy because I realized converting this file was introducing a lot of change.</p>\n<p>Instead, I searched for a file with the following attributes:</p>\n<ol>\n<li>Not React</li>\n<li>No Dependencies</li>\n<li>Short</li>\n</ol>\n<p>The file I decided to use was <code>src/util/data.js</code>, a set of basic data transform functions:</p>\n<pre><code>$ mv src/util/data.{js,tsx}\n$ cat src/util/data.tsx\n\nexport const eventsWithSetlist = (events) => {\n  return events\n    .edges\n    .map((e) => e.node)\n    .filter((e) => e.frontmatter.setlist)\n};\n\nexport const eventsBySong = (events, songs) => {\n  return eventsWithSetlist(events)\n  .reduce((songs, event) => {\n    (event.frontmatter.setlist || []).map((song) => {\n      if(!songs[song]) { songs[song] = [] }\n      songs[song].push(event.fields.date)\n    });\n    return songs;\n  }, {});\n}\n\nexport const eventsWithSong = (events, song) => {\n  return events\n    .edges\n    .filter((event) => event.node.frontmatter.setlist)\n    .filter((event) => event.node.frontmatter.setlist.includes(song));\n}\n\nexport const nodesByBasename = (collection) => {\n  return collection.edges.map((e) => e.node).reduce((nodesByBasename, node) => {\n    return {...nodesByBasename,\n      [node.fields.basename]: node,\n    };\n  }, {})\n};\n</code></pre>\n<p>I chose this file because of its size, and lack of dependencies.</p>\n<h2>üëçüèª Obstacle 2: LGTM</h2>\n<p>Running <code>gatsby-develop</code>, with my newly saved <code>data.tsx</code> generated errors.\nThis was expected, since the code was not converted to <a href=\"https://www.typescriptlang.org/\">Typescript</a>.</p>\n<p>However, I was faced with <strong>absolutely 0 <a href=\"https://www.typescriptlang.org/\">Typescript</a> errors</strong>.</p>\n<p>After some digging around the internet, I found this comment in the\nI saw this listed in the <code>caveats</code> section of the README for <a href=\"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-typescript\">gatsby-plugin-typescript</a>:</p>\n<blockquote>\n<p>This plugin uses babel-plugin-transform-typescript to transpile typescript.\n<strong>It does not do type checking.</strong>\nAlso since the TypeScript compiler is not involved, the following applies:<br>\n...</p>\n</blockquote>\n<h1>‚úÖ Step 2: Check Please!</h1>\n<p>Its not very useful to write typescript, and have zero errors shown.</p>\n<p>I found this plugin: <a href=\"https://www.gatsbyjs.org/packages/gatsby-plugin-typescript-checker/?=check\">gatsby-plugin-typescript-checker</a>.\nThe README, for that plugin states:</p>\n<blockquote>\n<p>gatsby-plugin-typescript adds TypeScript transpilation but not type checking.\nThis plug adds fork-ts-checker-webpack-plugin to Gatsby <strong>to display type errors in the browser and the command line</strong>.</p>\n</blockquote>\n<p>Sounds Great! So I followed the installation steps in the README:</p>\n<h3>Install Plugins</h3>\n<pre><code>$ yarn add gatsby-plugin-typescript gatsby-plugin-typescript-checker\n</code></pre>\n<h3>Update gatsby-config.js:</h3>\n<pre><code>plugins: [\n  'gatsby-plugin-typescript',\n  'gatsby-plugin-typescript-checker',\n</code></pre>\n<h2>üòï Obstacle 3: Typescript?</h2>\n<p>After installing <a href=\"https://www.gatsbyjs.org/packages/gatsby-plugin-typescript-checker/?=check\">gatsby-plugin-typescript-checker</a>, I was faced with a new error:</p>\n<pre><code>error Plugin gatsby-plugin-typescript-checker returned an error\n  Error: Cannot find module 'typescript'\n</code></pre>\n<h4>Add Typescript</h4>\n<p>This error was resolved by simply adding <a href=\"https://www.typescriptlang.org/\">Typescript</a> as a dependency:</p>\n<pre><code>$ yarn add typescript\n</code></pre>\n<p>But, <code>gatsby-develop</code> was still confused:</p>\n<pre><code>error UNHANDLED REJECTION\n  Error: Cannot find \"tsconfig.json\" file. Please check webpack and Fork  TsCheckerWebpackPlugin configuration.\n  Possible errors:\n    - wrong `context` directory in webpack configuration (if   `tsconfig` is not set or is a relative path in fork plugi  n configuration)\n    - wrong `tsconfig` path in fork plugin configuration (sh  ould be a relative or absolute path)\n</code></pre>\n<p>Since I have no experience with creating a <code>tsconfig.json</code> file, I copied one from <a href=\"https://github.com/resir014/gatsby-starter-typescript-plus\">gatsby-starter-typescript-plus</a>:</p>\n<pre><code>{\n  \"compilerOptions\": {\n    \"module\": \"commonjs\",\n    \"target\": \"esnext\",\n    \"jsx\": \"preserve\",\n    \"lib\": [\"dom\", \"es2015\", \"es2017\"],\n    \"strict\": true,\n    \"noEmit\": true,\n    \"isolatedModules\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"removeComments\": false,\n    \"preserveConstEnums\": true\n  },\n  \"include\": [\"./src/**/*\"]\n}\n</code></pre>\n<h2>üéâ Voil√†</h2>\n<p>Now <code>gastby-develop</code> was providing useful typescript errors:</p>\n<pre><code>27:71 Parameter 'node' implicitly has an 'any' type.\n    25 |\n    26 | export const nodesByBasename = (collection) => {\n  > 27 |   return collection.edges.map((e) => e.node).reduce((nodesByBasename, node) => {\n       |                                                                       ^\n    28 |     return {...nodesByBasename,\n    29 |       [node.fields.basename]: node,\n    30 |     };\n‚Ñπ ÔΩ¢wdmÔΩ£: Failed to compile.\n</code></pre>\n<h1>‚úçÔ∏èStep 3: Typescriptify</h1>\n<p>The most naive way to typscriptify this file is to simply add <code>any</code> types to all the variables:</p>\n<pre><code>+ export const eventsWithSetlist = (events: any) => {\n+    .map((e: any) => e.node)\n+    .filter((e: any) => e.frontmatter.setlist)\n\n+ export const eventsBySong = (events: any) => {\n+   .reduce((memo: any, event: any) => {\n+     (event.frontmatter.setlist || []).map((song: any) => {\n\n+ export const eventsWithSong = (events: any, song: any) => {\n+     .filter((event: any) => event.node.frontmatter.setlist)\n+     .filter((event: any) => event.node.frontmatter.setlist.includes(song))\n\n+ export const nodesByBasename = (collection: any) => {\n+   return collection.edges.map((e: any) => e.node).reduce((memo: any, node: any) => {\n</code></pre>\n<p>And, then Gatsby was happy!</p>\n<h1>My Recommendation</h1>\n<p>To add <a href=\"https://www.typescriptlang.org/\">Typescript</a> to a <a href=\"https://www.gatsbyjs.org/blog/2018-09-17-gatsby-v2/\">Gatsby Version 2.0</a> project, do the following:</p>\n<h3>Step 1: Install Dependencies</h3>\n<pre><code>$ yarn add gatsby-plugin-typescript gatsby-plugin-typescript-checker typescript`\n</code></pre>\n<h3>Step 2: Setup a tsconfig</h3>\n<p>Either run <code>tsc --init</code>, or copy an existing <code>tsconfig.json</code> from another project.</p>\n<p>I took mine from <a href=\"https://github.com/resir014/gatsby-starter-typescript-plus\">gatsby-starter-typescript-plus</a>:</p>\n<pre><code>{\n  \"compilerOptions\": {\n    \"module\": \"commonjs\",\n    \"target\": \"esnext\",\n    \"jsx\": \"preserve\",\n    \"lib\": [\"dom\", \"es2015\", \"es2017\"],\n    \"strict\": true,\n    \"noEmit\": true,\n    \"isolatedModules\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"removeComments\": false,\n    \"preserveConstEnums\": true\n  },\n  \"include\": [\"./src/**/*\"]\n}\n</code></pre>\n<h3>Step 3: Update Gatsby Config</h3>\n<pre><code>plugins: [\n  'gatsby-plugin-typescript',\n  'gatsby-plugin-typescript-checker',\n</code></pre>\n<h3>Caveats</h3>\n<p>I am pretty sure I will have to add several more packages as I typescriptify my codebase.\nWhen this happens I will post an update.</p>","frontmatter":{"title":"Installing Typescript on richsoni.com","hero":"/images/posts/gatsby-logo.jpg"},"fields":{"date":"2018-12-10"}}},"pageContext":{"url":"/posts/2018-12-10-installing-typescript/"}}