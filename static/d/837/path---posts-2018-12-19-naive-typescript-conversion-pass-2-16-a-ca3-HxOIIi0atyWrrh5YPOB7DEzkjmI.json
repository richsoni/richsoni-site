{"data":{"markdownRemark":{"html":"<p>This is the second pass at my Typescript conversion project.\nThe first part is chronicled in an older post titled: <a href=\"/posts/2018-12-18-naive-typescript-conversion-pass-1\">Typescript Conversion Pass 1</a>.</p>\n<h1>Experiment Parameters</h1>\n<ol>\n<li>Merge within: ~1 hour (small amount of work)</li>\n<li>Must include: a post with content from this document</li>\n<li>Must include: A commit with some converted Typescript files</li>\n</ol>\n<h1>Strategy</h1>\n<ol>\n<li>Convert files importing only libraries</li>\n<li>Import files which only import other tsc converted files</li>\n</ol>\n<h1>Outcome</h1>\n<pre><code>$ ./scripts/typescript-vs-javascript\n46% (19 Typescript / 22 Javascript)\n</code></pre>\n<h2>Summary Of Changes</h2>\n<pre><code>$ git diff --stat master\n package.json                                               |   4 +++\n scripts/typescript-vs-javascript                           |   2 +-\n src/components/AlbumArtwork/{index.js => index.tsx}        |   5 ++--\n src/components/AlbumMediaCard/{index.js => index.tsx}      |   6 ++--\n src/components/BaseMeta/{index.js => index.tsx}            |   2 +-\n src/components/Breadcrumbs/{index.jsx => index.tsx}        |   6 ++--\n src/components/Half/index.js                               |  10 -------\n src/components/Half/index.tsx                              |  18 ++++++++++++\n src/components/LatestRelease/{index.js => index.jsx}       |   0\n src/components/{LocationMap.js => LocationMap.tsx}         |   3 +-\n src/components/ResponsiveMenu/{Margin.js => Margin.tsx}    |   0\n src/components/Table/{dateSort.js => dateSort.ts}          |   0\n src/components/Table/{index.js => index.tsx}               |  87 +++++++++++++++++++++++++++++-----------------------------\n src/components/Tabs/index.js                               |  29 --------------------\n src/components/Tabs/index.tsx                              |  37 +++++++++++++++++++++++++\n src/components/disqus/{component.js => component.tsx}      |   0\n src/posts/2018-12-18-naive-typescript-conversion-pass-1.md |   4 +--\n src/posts/2018-12-19-naive-typescript-conversion-pass-2.md | 167 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n src/utils/{momentify.js => momentify.ts}                   |   3 +-\n src/utils/{presenters.js => presenters.ts}                 |   9 +++---\n yarn.lock                                                  |  44 +++++++++++++++++++++++++++--\n 21 files changed, 332 insertions(+), 104 deletions(-)\n</code></pre>\n<h2>Learnings</h2>\n<p>I learned a few important things during this phase of the conversion.\nI expect these learnings to be useful in future passes.</p>\n<h3>Importing Type Definitions</h3>\n<p>During this excersize, I was faced with a new error:\n<code>Could not find a declaration file for module 'react-image-fallback'. 'node_modules/react-image-fallback/lib/index.js' implicitly has an 'any' type.</code></p>\n<p>In Typescript, a library is expected to export its Type Definitions.\nIf these are not present, then the compiler will complain in a way similar to the above.</p>\n<p>This is usually resolved by a simple:</p>\n<pre><code>yarn add '@types/react-image-fallback'\n</code></pre>\n<p><a href=\"https://blog.angular-university.io/typescript-2-type-system-how-do-type-definitions-work-in-npm-when-to-use-types-and-why-what-are-compiler-opt-in-types/\">Angular University's Type Definitions Article</a> notes a few interesting things about custom type definitions.\nIt's worth a full read, but the relevant parts for this post are:</p>\n<blockquote>\n<p>This @types scoped package is where we can find a ton of useful type definitions, such as for example the type definitions of node that allow us to use  require for example.<br>\n...  </p>\n<p>The @types scope package contains type definitions for a lot of libraries, like Express, Sequelize, JQuery, and many others. So definitively have a look there if you are missing some type definitions, but make sure of two things first:</p>\n<ol>\n<li>check if the package you are using already has types built-in, and if so prefer those</li>\n<li>check if type definitions are already shipped with the compiler, more on this later</li>\n</ol>\n</blockquote>\n<p>This commit required a few Type definitions to be added:</p>\n<pre><code>$ git diff master -- package.json\ndiff --git a/package.json b/package.json\nindex 4560e16..10c70f4 100644\n--- a/package.json\n+++ b/package.json\n@@ -12,6 +12,10 @@\n     \"tsc:watch\": \"tsc --noEmit --watch\"\n   },\n   \"dependencies\": {\n+    \"@types/react\": \"^16.7.17\",\n+    \"@types/react-dom\": \"^16.0.11\",\n+    \"@types/react-helmet\": \"^5.0.7\",\n+    \"@types/react-image-fallback\": \"^8.0.0\",\n     \"fs-exists-sync\": \"^0.1.0\",\n     \"gatsby\": \"^2.0.0\",\n     \"gatsby-link\": \"^2.0.7\",\n</code></pre>\n<h3>Import CSS Modules</h3>\n<p>CSSModules require some massaging to work.  However, as <a href=\"https://medium.com/@sapegin/css-modules-with-typescript-and-webpack-6b221ebe5f10\">Artem Sapegin</a> suggests in his article, there the easy stopgap solution is to bypass Typescript for CSSModules, but using a require:</p>\n<pre><code>const styles = require('./styles.module.css');\n</code></pre>\n<h3>Simple Types In React</h3>\n<p>Types in React require some minor cooercion into Typescript, even after adding the custom types for <code>react</code> and <code>react-dom</code> (as noted above).\nConsider as an example a simple file from the commit:</p>\n<pre><code>$ git diff master -- src/components/Half/index.tsx\ndiff --git a/src/components/Half/index.tsx b/src/components/Half/index.tsx\nnew file mode 100644\nindex 0000000..d59e551\n--- /dev/null\n+++ b/src/components/Half/index.tsx\n@@ -0,0 +1,18 @@\n+import React from \"react\";\n+const styles = require('./styles.module.css');\n+\n+type Props = {\n+  style: any,\n+}\n+\n+type State = {\n+\n+}\n+\n+export default class Half extends React.Component&#x3C;Props, State>{\n+  render(){\n+    return &#x3C;section className={styles.half} style={this.props.style}>\n+      {this.props.children}\n+    &#x3C;/section>\n+  }\n+}\n</code></pre>\n<p>When creating a Component in Typescript, <code>Type definitions</code> for Props and State must be passed in.</p>\n<p>Read [Angular University Type Definitions], for more information importing type declarations.</p>\n<h3></h3>\n<p>Some of my files also required custom Typing to be generated.\nIn other commits I was able to avoid this, but it seemed like some of the more complicated files where going to need a custom type definition.</p>\n<pre><code>$ git diff master -- src/components/Tabs/index.tsx\n\ndiff --git a/src/components/Tabs/index.tsx b/src/components/Tabs/index.tsx\nnew file mode 100644\nindex 0000000..b763d43\n--- /dev/null\n+++ b/src/components/Tabs/index.tsx\n@@ -0,0 +1,37 @@\n+import React from \"react\"\n+const styles = require('./styles.module.css')\n+\n+const initialState = { activeTab: 0 }\n+type State = Readonly&#x3C;typeof initialState>\n+\n+type TabsType = {\n+  content: () => JSX.Element,\n+  title: string\n+}\n+\n+type Props = {\n+  tabs: Array&#x3C;TabsType>\n+}\n+\n+export default class Tabs extends React.Component&#x3C;Props, State> {\n+  readonly state: State = initialState\n+\n+  render() {\n+    //...the code\n+  }\n+}\n</code></pre>","frontmatter":{"title":"Naive Typescript Conversion on RichSoni.com: Pass 2","hero":"/images/posts/gatsby-logo.jpg"},"fields":{"date":"2018-12-19"}}},"pageContext":{"url":"/posts/2018-12-19-naive-typescript-conversion-pass-2/"}}