{"data":{"markdownRemark":{"html":"<p>This is the fourth pass of converting this site to Typescript.</p>\n<h3>Previous Posts</h3>\n<ul>\n<li>[Installing Typescript on RichSoni.com]</li>\n<li>[Typescript Conversion Pass 1]</li>\n<li>[Typescript Conversion Pass 2]</li>\n<li>[Typescript Conversion Pass 3]</li>\n</ul>\n<h1>Experiment Parameters</h1>\n<ol>\n<li>Convert all javascript files in <code>src/</code> to typescript</li>\n<li>Must include: a post with content from this document</li>\n</ol>\n<h1>Strategy</h1>\n<p>Similarly to [Typescript Conversion Pass 3], I did a simple rename of all <code>js</code> files to <code>ts</code>:\n$ git ls-files -- 'src/*.js'\nsrc/pages/albums.js\nsrc/pages/events.js\nsrc/pages/index.js\nsrc/pages/posts.js\nsrc/pages/songs.js\nsrc/pages/subscribe.js\nsrc/templates/albums.js\nsrc/templates/events.js\nsrc/templates/posts.js\nsrc/templates/songs.js</p>\n<pre><code># Outcome\n</code></pre>\n<p>$ ./scripts/typescript-vs-javascript\n68% (28 Typescript / 13 Javascript)</p>\n<pre><code>## Summary Of Changes\n</code></pre>\n<p>$ git diff --stat master\npackage.json                                               |  1 +\nsrc/components/Content/{index.jsx => index.tsx}            |  4 ++--\nsrc/components/EventIndex/{index.js => index.tsx}          |  7 +++---\nsrc/components/FixedMenu/{index.js => index.tsx}           | 15 ++++++++-----\nsrc/components/Footer/{index.js => index.tsx}              |  2 +-\nsrc/components/LatestRelease/{index.jsx => index.tsx}      | 38 ++++++++++++++++++++++----------\nsrc/components/Layout/{index.js => index.tsx}              | 12 +++++++---\nsrc/components/Logo/{index.js => index.tsx}                |  6 ++---\nsrc/components/MailingListHalf/{index.js => index.tsx}     |  2 +-\nsrc/components/MenuToggle/{index.js => index.tsx}          | 22 +++++++++++--------\nsrc/components/OverlayMenu/{index.js => index.tsx}         |  4 ++--\nsrc/components/ResponsiveMenu/{index.js => index.tsx}      | 16 +++++++++-----\nsrc/components/SocialButton/{index.js => index.tsx}        | 27 +++++++++++------------\nsrc/components/Table/index.tsx                             | 11 ++++++----\nsrc/posts/2019-01-03-naive-typescript-conversion-pass-3.md | 76 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nyarn.lock                                                  |  5 +++++\n16 files changed, 183 insertions(+), 65 deletions(-)</p>\n<pre><code>## Learnings\n\n\nI learned a few important things during this phase of the conversion.\nI expect these learnings to be useful in future passes.\n\n### JSX Requires the proper extension in Typescript\n</code></pre>\n<p>src/components/Footer/index.ts(8,5): error TS1005: '>' expecte</p>\n<pre><code>This was an error I saw a lot because I used to only use `.js` for `jsx` files.\n\n### Pure Function Components\n\nI write a lot of components in a pure functional form:\n</code></pre>\n<p>export default (props) =>{\nreturn <div>{props.children}</div>\n}</p>\n<pre><code>React comes with a special typing for these functions:\n</code></pre>\n<p>type Props = {\nchildren: JSX.Element,\n}\nconst Component: React.SFC<Props> = (props) => {\nreturn <div>{this.props.children}</div>\n}\nexport default Component</p>\n<pre><code>### Optional Attributes\n\nI used a lot of optional attributes on props.\nTo make an attribute optional, add a `?` after its key:\n</code></pre>\n<p>type Props = {\nrequiredProp: boolean,\noptionalProp?: boolean,\n}</p>\n<pre><code>## Improvements\n\n### Vim Plugin\n\nI added a vim plugin called [tsuquyomi], which leverages the TSServer to do a lot of neat things.\nIn this case, I used the quickfix list population facility to quickly navigate to failing `tsc` lines.\n\n### Error Catching\n\nA few significant type errors where caught by Typescript in this commit.\nOne was a component expecting a boolean value for a prop, and a string was being passed.\n\nA few unneeded props where detected as well.\n\n\n# Conclusion\n\nAt this point I am starting to get value out of using Typescript.  The code quality of the project has improved, and my productivity has potential gains through leveraging omnicomplete.\n\nOne thing I would like to note is that during this pass, I started to flesh out more types when I was feeling inspired.\nI can see how writing new components will be easier with Typescript for sure.\n\n\n[Artem Sapegin's CSSModules with Typescript Article]: https://medium.com/@sapegin/css-modules-with-typescript-and-webpack-6b221ebe5f10\n[Angular University's Type Definitions Article]: https://blog.angular-university.io/typescript-2-type-system-how-do-type-definitions-work-in-npm-when-to-use-types-and-why-what-are-compiler-opt-in-types/\n[Stackoverflow question on readonly state]: https://stackoverflow.com/questions/51074355/cannot-assign-to-state-because-it-is-a-constant-or-a-read-only-property\n[Typescript Conversion Pass 1]: /posts/2018-12-18-naive-typescript-conversion-pass-1\n[Typescript Conversion Pass 2]: /posts/2018-12-19-naive-typescript-conversion-pass-2\n[Installing Typescript on RichSoni.com]: /posts/2018-12-10-installing-typescript\n[tsuquyomi]: https://github.com/Quramy/tsuquyomi/\n</code></pre>","frontmatter":{"title":"Naive Typescript Conversion on RichSoni.com: Pass 4","hero":"/images/posts/gatsby-logo.jpg"},"fields":{"date":"2019-01-08"}}},"pageContext":{"url":"/posts/2019-01-08-naive-typescript-conversion-pass-4/"}}