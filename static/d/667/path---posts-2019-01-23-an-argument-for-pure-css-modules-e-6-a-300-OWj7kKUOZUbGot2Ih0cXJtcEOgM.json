{"data":{"markdownRemark":{"html":"<h1>üëÅ üòç Pure CSSModules</h1>\n<p>For better or for worse here are my current opinions on Styling React Components:</p>\n<h2>‚≠êOpinion 1: CSS should be used to describe <em>How</em> a component is displayed by the <em>browser</em></h2>\n<h3>Alternatives</h3>\n<p>To understand why I hold this opinion, its important to consider the alternative approaches:</p>\n<ul>\n<li>Inline JSX Styles</li>\n<li><code>&#x3C;style></code> tag Injecting Libraries (<a href=\"https://github.com/FormidableLabs/radium\">Radium</a>, <a href=\"https://www.styled-components.com/\">StyledComponents</a>)</li>\n</ul>\n<p>Chris Coyier put a lot of thought into this argument in his article <a href=\"https://css-tricks.com/the-debate-around-do-we-even-need-css-anymore/\">The Debate Around 'Do We Even Need CSS Anymore?'</a>.\nHe outlines the following advantages for Inlining styles over CSS: </p>\n<ul>\n<li>Cascade-less</li>\n<li>All Javascript</li>\n<li>Dynamic Styles</li>\n</ul>\n<h3>Technical Benefits</h3>\n<p>While its easy to use they arguments to convince yourself to use an inline approach, to me its advantages are what brought me back:</p>\n<ul>\n<li>\n<p>Cachability - by separating styles into a separate stylesheet, the cachability of these assets is improved</p>\n</li>\n<li>\n<p>Specificity Spectrum Obfuscation - Javascript approaches often deny or at a minimum obfuscate the specificity spectrum feature of CSS <code>!important</code>.  Each approach compromises it for different reasons.  For example, inline styles are the top of the spectrum, so to override any inline style an <code>!important</code> is required</p>\n</li>\n<li>\n<p>States - <code>:hover</code>, <code>:focus</code>, etc. StyledCom</p>\n</li>\n<li>\n<p>Advanced Browser Features - While the <code>&#x3C;style></code> injecting libraries do support these, naitive JSX inlineing does not support things like CSS-Animations, and Browser Specific features</p>\n</li>\n</ul>\n<h3>üññSpeaking The Right Language</h3>\n<p>Besides the technical reasons I prefer using CSS, there is also a social driver as well.</p>\n<p>In essence, CSS is a language for describing <em>how</em> elements should be displayed by a browser.\nSince this is usually <em>negotiated between developers and designers</em> it seems logical to consider Conway's Law when making technical desisions about that relationship.</p>\n<blockquote>\n<p> Any organization that designs a system (defined more broadly here than just information systems) will inevitably produce a design whose structure is a copy of the organization's communication structure ~ Melvin Conway (<a href=\"http://www.melconway.com/Home/Committees_Paper.html\">Conway's Law</a>)</p>\n</blockquote>\n<p>In this regard, Conway's Law suggests that the system design should consider the channel between design and engineering.</p>\n<p>While expecting a designer to grok inline JSX or <code>style</code> tag injection could be stretch, most designers can communication in CSS.</p>\n<p>For this reason alone, I am prone to prefer a CSS Solution.</p>\n<h3>Communication Channels When Creating Components:</h3>\n<img width='800' src='/images/posts/2019-01-23-speaking-dev.svg' />\n<h1>‚≠êOpinion 2: CSS</h1>\n<h1>Styled Components</h1>\n<p>Talia Marcassa makes a great point in <a href=\"https://medium.com/building-crowdriff/styled-components-to-use-or-not-to-use-a6bb4a7ffc21\">Styled Components: To Use or Not to Use?</a></p>\n<blockquote>\n<p>Use Styled Components for elements whose styling (colours, images, etc.) is configured by the user</p>\n</blockquote>\n<p>Having used both CSSMoudles, Sass, and Inline Styles for these types of features, I can definitely see how <a href=\"https://www.styled-components.com/\">StyledComponents</a> is the right tool for that job.</p>","frontmatter":{"title":"An Argument for Pure CSSModules","hero":null},"fields":{"date":"2019-01-23"}}},"pageContext":{"url":"/posts/2019-01-23-an-argument-for-pure-css-modules/"}}