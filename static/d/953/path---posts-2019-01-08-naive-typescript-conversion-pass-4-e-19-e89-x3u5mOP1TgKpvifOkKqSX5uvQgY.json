{"data":{"markdownRemark":{"html":"<p>This is the fourth pass of converting this site to Typescript.</p>\n<h3>Previous Posts</h3>\n<ul>\n<li><a href=\"/posts/2018-12-10-installing-typescript\">Installing Typescript on RichSoni.com</a></li>\n<li><a href=\"/posts/2018-12-18-naive-typescript-conversion-pass-1\">Typescript Conversion Pass 1</a></li>\n<li><a href=\"/posts/2018-12-19-naive-typescript-conversion-pass-2\">Typescript Conversion Pass 2</a></li>\n<li>[Typescript Conversion Pass 3]</li>\n</ul>\n<h1>Experiment Parameters</h1>\n<ol>\n<li>Convert all javascript files in <code>src/</code> to typescript</li>\n<li>Must include: a post with content from this document</li>\n</ol>\n<h1>Strategy</h1>\n<h1>Outcome</h1>\n<pre><code>$ ./scripts/typescript-vs-javascript\n68% (28 Typescript / 13 Javascript)\n</code></pre>\n<h2>Summary Of Changes</h2>\n<pre><code>$ git diff --stat master\n package.json                                               |  1 +\n src/components/Content/{index.jsx => index.tsx}            |  4 ++--\n src/components/EventIndex/{index.js => index.tsx}          |  7 +++---\n src/components/FixedMenu/{index.js => index.tsx}           | 15 ++++++++-----\n src/components/Footer/{index.js => index.tsx}              |  2 +-\n src/components/LatestRelease/{index.jsx => index.tsx}      | 38 ++++++++++++++++++++++----------\n src/components/Layout/{index.js => index.tsx}              | 12 +++++++---\n src/components/Logo/{index.js => index.tsx}                |  6 ++---\n src/components/MailingListHalf/{index.js => index.tsx}     |  2 +-\n src/components/MenuToggle/{index.js => index.tsx}          | 22 +++++++++++--------\n src/components/OverlayMenu/{index.js => index.tsx}         |  4 ++--\n src/components/ResponsiveMenu/{index.js => index.tsx}      | 16 +++++++++-----\n src/components/SocialButton/{index.js => index.tsx}        | 27 +++++++++++------------\n src/components/Table/index.tsx                             | 11 ++++++----\n src/posts/2019-01-03-naive-typescript-conversion-pass-3.md | 76 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n yarn.lock                                                  |  5 +++++\n 16 files changed, 183 insertions(+), 65 deletions(-)\n</code></pre>\n<h2>Learnings</h2>\n<p>I learned a few important things during this phase of the conversion.\nI expect these learnings to be useful in future passes.</p>\n<h3>JSX Requires the proper extension in Typescript</h3>\n<pre><code>src/components/Footer/index.ts(8,5): error TS1005: '>' expecte\n</code></pre>\n<p>This was an error I saw a lot because I used to only use <code>.js</code> for <code>jsx</code> files.</p>\n<h3>Pure Function Components</h3>\n<p>I write a lot of components in a pure functional form:</p>\n<pre><code>export default (props) =>{\n return &#x3C;div>{props.children}&#x3C;/div>\n}\n</code></pre>\n<p>React comes with a special typing for these functions:</p>\n<pre><code>type Props = {\n  children: JSX.Element,\n}\nconst Component: React.SFC&#x3C;Props> = (props) => {\n  return &#x3C;div>{this.props.children}&#x3C;/div>\n}\nexport default Component\n</code></pre>\n<h3>Optional Attributes</h3>\n<p>I used a lot of optional attributes on props.\nTo make an attribute optional, add a <code>?</code> after its key:</p>\n<pre><code>type Props = {\n  requiredProp: boolean,\n  optionalProp?: boolean,\n}\n</code></pre>\n<h2>Improvements</h2>\n<h3>Vim Plugin</h3>\n<p>I added a vim plugin called <a href=\"https://github.com/Quramy/tsuquyomi/\">tsuquyomi</a>, which leverages the TSServer to do a lot of neat things.\nIn this case, I used the quickfix list population facility to quickly navigate to failing <code>tsc</code> lines.</p>\n<h3>Error Catching</h3>\n<p>A few significant type errors where caught by Typescript in this commit.\nOne was a component expecting a boolean value for a prop, and a string was being passed.</p>\n<p>A few unneeded props where detected as well.</p>\n<h1>Conclusion</h1>\n<p>At this point I am starting to get value out of using Typescript.  The code quality of the project has improved, and my productivity has potential gains through leveraging omnicomplete.</p>\n<p>One thing I would like to note is that during this pass, I started to flesh out more types when I was feeling inspired.\nI can see how writing new components will be easier with Typescript for sure.</p>","frontmatter":{"title":"Naive Typescript Conversion on RichSoni.com: Pass 4","hero":"/images/posts/gatsby-logo.jpg"},"fields":{"date":"2019-01-08"}}},"pageContext":{"url":"/posts/2019-01-08-naive-typescript-conversion-pass-4/"}}